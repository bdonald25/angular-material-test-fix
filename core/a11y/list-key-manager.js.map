{"version":3,"sources":["core/a11y/list-key-manager.ts"],"names":[],"mappings":"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","file":"list-key-manager.js","sourcesContent":["import {QueryList} from '@angular/core';\r\nimport {UP_ARROW, DOWN_ARROW, TAB, HOME, END} from '../core';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {Subject} from 'rxjs/Subject';\r\n\r\n/**\r\n * This is the interface for focusable items (used by the ListKeyManager).\r\n * Each item must know how to focus itself and whether or not it is currently disabled.\r\n */\r\nexport interface Focusable {\r\n  focus(): void;\r\n  disabled?: boolean;\r\n}\r\n\r\n/**\r\n * This class manages keyboard events for selectable lists. If you pass it a query list\r\n * of focusable items, it will focus the correct item when arrow events occur.\r\n */\r\nexport class ListKeyManager {\r\n  private _focusedItemIndex: number;\r\n  private _tabOut: Subject<any> = new Subject();\r\n  private _wrap: boolean = false;\r\n\r\n  constructor(private _items: QueryList<Focusable>) {}\r\n\r\n  /**\r\n   * Turns on focus wrapping mode, which ensures that the focus will wrap to\r\n   * the other end of list when there are no more items in the given direction.\r\n   *\r\n   * @returns The ListKeyManager that the method was called on.\r\n   */\r\n  withFocusWrap(): this {\r\n    this._wrap = true;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the focus of the list to the item at the index specified.\r\n   *\r\n   * @param index The index of the item to be focused.\r\n   */\r\n  setFocus(index: number): void {\r\n    this._focusedItemIndex = index;\r\n    this._items.toArray()[index].focus();\r\n  }\r\n\r\n  /**\r\n   * Sets the focus depending on the key event passed in.\r\n   * @param event Keyboard event to be used for determining which element to focus.\r\n   */\r\n  onKeydown(event: KeyboardEvent): void {\r\n    switch (event.keyCode) {\r\n      case DOWN_ARROW:\r\n        this.focusNextItem();\r\n        break;\r\n      case UP_ARROW:\r\n        this.focusPreviousItem();\r\n        break;\r\n      case HOME:\r\n        this.focusFirstItem();\r\n        break;\r\n      case END:\r\n        this.focusLastItem();\r\n        break;\r\n      case TAB:\r\n        // Note that we shouldn't prevent the default action on tab.\r\n        this._tabOut.next(null);\r\n        return;\r\n      default:\r\n        return;\r\n    }\r\n\r\n    event.preventDefault();\r\n  }\r\n\r\n  /** Focuses the first enabled item in the list. */\r\n  focusFirstItem(): void {\r\n    this._setFocusByIndex(0, 1);\r\n  }\r\n\r\n  /** Focuses the last enabled item in the list. */\r\n  focusLastItem(): void {\r\n    this._setFocusByIndex(this._items.length - 1, -1);\r\n  }\r\n\r\n  /** Focuses the next enabled item in the list. */\r\n  focusNextItem(): void {\r\n    this._setFocusByDelta(1);\r\n  }\r\n\r\n  /** Focuses a previous enabled item in the list. */\r\n  focusPreviousItem(): void {\r\n    this._setFocusByDelta(-1);\r\n  }\r\n\r\n  /** Returns the index of the currently focused item. */\r\n  get focusedItemIndex(): number {\r\n    return this._focusedItemIndex;\r\n  }\r\n\r\n  /**\r\n   * Allows setting of the focusedItemIndex without focusing the item.\r\n   * @param index The new focusedItemIndex.\r\n   */\r\n  updateFocusedItemIndex(index: number) {\r\n    this._focusedItemIndex = index;\r\n  }\r\n\r\n  /**\r\n   * Observable that emits any time the TAB key is pressed, so components can react\r\n   * when focus is shifted off of the list.\r\n   */\r\n  get tabOut(): Observable<void> {\r\n    return this._tabOut.asObservable();\r\n  }\r\n\r\n  /**\r\n   * This method sets focus to the correct item, given a list of items and the delta\r\n   * between the currently focused item and the new item to be focused. It will calculate\r\n   * the proper focus differently depending on whether wrap mode is turned on.\r\n   */\r\n  private _setFocusByDelta(delta: number, items = this._items.toArray()): void {\r\n    this._wrap ? this._setWrapModeFocus(delta, items)\r\n               : this._setDefaultModeFocus(delta, items);\r\n  }\r\n\r\n  /**\r\n   * Sets the focus properly given \"wrap\" mode. In other words, it will continue to move\r\n   * down the list until it finds an item that is not disabled, and it will wrap if it\r\n   * encounters either end of the list.\r\n   */\r\n  private _setWrapModeFocus(delta: number, items: Focusable[]): void {\r\n    // when focus would leave menu, wrap to beginning or end\r\n    this._focusedItemIndex =\r\n      (this._focusedItemIndex + delta + items.length) % items.length;\r\n\r\n    // skip all disabled menu items recursively until an active one is reached\r\n    if (items[this._focusedItemIndex].disabled) {\r\n      this._setWrapModeFocus(delta, items);\r\n    } else {\r\n      items[this._focusedItemIndex].focus();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the focus properly given the default mode. In other words, it will\r\n   * continue to move down the list until it finds an item that is not disabled. If\r\n   * it encounters either end of the list, it will stop and not wrap.\r\n   */\r\n  private _setDefaultModeFocus(delta: number, items: Focusable[]): void {\r\n    this._setFocusByIndex(this._focusedItemIndex + delta, delta, items);\r\n  }\r\n\r\n  /**\r\n   * Sets the focus to the first enabled item starting at the index specified. If the\r\n   * item is disabled, it will move in the fallbackDelta direction until it either\r\n   * finds an enabled item or encounters the end of the list.\r\n   */\r\n  private _setFocusByIndex(index: number, fallbackDelta: number,\r\n                           items = this._items.toArray()): void {\r\n    if (!items[index]) { return; }\r\n    while (items[index].disabled) {\r\n      index += fallbackDelta;\r\n      if (!items[index]) { return; }\r\n    }\r\n\r\n    this.setFocus(index);\r\n  }\r\n\r\n}\r\n"]}