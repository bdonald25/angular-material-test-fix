{"version":3,"file":"autocomplete-trigger.js","sourceRoot":"","sources":["../../../../src/lib/autocomplete/autocomplete-trigger.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n    AfterContentInit,\r\n    Directive,\r\n    ElementRef,\r\n    forwardRef,\r\n    Host,\r\n    Input,\r\n    NgZone,\r\n    Optional,\r\n    OnDestroy,\r\n    ViewContainerRef,\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {Overlay, OverlayRef, OverlayState, TemplatePortal} from '../core';\r\nimport {MdAutocomplete} from './autocomplete';\r\nimport {PositionStrategy} from '../core/overlay/position/position-strategy';\r\nimport {ConnectedPositionStrategy} from '../core/overlay/position/connected-position-strategy';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {MdOptionSelectEvent, MdOption} from '../core/option/option';\r\nimport {ActiveDescendantKeyManager} from '../core/a11y/activedescendant-key-manager';\r\nimport {ENTER, UP_ARROW, DOWN_ARROW} from '../core/keyboard/keycodes';\r\nimport {Dir} from '../core/rtl/dir';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport 'rxjs/add/observable/merge';\r\nimport 'rxjs/add/operator/startWith';\r\nimport 'rxjs/add/operator/switchMap';\r\nimport {MdInputContainer, FloatPlaceholderType} from '../input/input-container';\r\n\r\n/**\r\n * The following style constants are necessary to save here in order\r\n * to properly calculate the scrollTop of the panel. Because we are not\r\n * actually focusing the active item, scroll must be handled manually.\r\n */\r\n\r\n/** The height of each autocomplete option. */\r\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\r\n\r\n/** The total height of the autocomplete panel. */\r\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\r\n\r\n/**\r\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\r\n * @docs-private\r\n */\r\nexport const MD_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MdAutocompleteTrigger),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  selector: 'input[mdAutocomplete], input[matAutocomplete]',\r\n  host: {\r\n    'role': 'combobox',\r\n    'autocomplete': 'off',\r\n    'aria-autocomplete': 'list',\r\n    'aria-multiline': 'false',\r\n    '[attr.aria-activedescendant]': 'activeOption?.id',\r\n    '[attr.aria-expanded]': 'panelOpen.toString()',\r\n    '[attr.aria-owns]': 'autocomplete?.id',\r\n    '(focus)': 'openPanel()',\r\n    '(blur)': '_handleBlur($event.relatedTarget?.tagName)',\r\n    '(input)': '_handleInput($event.target.value)',\r\n    '(keydown)': '_handleKeydown($event)',\r\n  },\r\n  providers: [MD_AUTOCOMPLETE_VALUE_ACCESSOR]\r\n})\r\nexport class MdAutocompleteTrigger implements AfterContentInit, ControlValueAccessor, OnDestroy {\r\n  private _overlayRef: OverlayRef;\r\n  private _portal: TemplatePortal;\r\n  private _panelOpen: boolean = false;\r\n\r\n  /** The subscription to positioning changes in the autocomplete panel. */\r\n  private _panelPositionSubscription: Subscription;\r\n\r\n  /** Manages active item in option list based on key events. */\r\n  private _keyManager: ActiveDescendantKeyManager;\r\n  private _positionStrategy: ConnectedPositionStrategy;\r\n\r\n  /** Stream of blur events that should close the panel. */\r\n  private _blurStream = new Subject<any>();\r\n\r\n  /** View -> model callback called when value changes */\r\n  _onChange = (value: any) => {};\r\n\r\n  /** View -> model callback called when autocomplete has been touched */\r\n  _onTouched = () => {};\r\n\r\n  /* The autocomplete panel to be attached to this trigger. */\r\n  @Input('mdAutocomplete') autocomplete: MdAutocomplete;\r\n\r\n  /** Property with mat- prefix for no-conflict mode. */\r\n  @Input('matAutocomplete')\r\n  get _matAutocomplete(): MdAutocomplete {\r\n    return this.autocomplete;\r\n  }\r\n\r\n  set _matAutocomplete(autocomplete: MdAutocomplete) {\r\n    this.autocomplete = autocomplete;\r\n  }\r\n\r\n  constructor(private _element: ElementRef, private _overlay: Overlay,\r\n              private _viewContainerRef: ViewContainerRef,\r\n              @Optional() private _dir: Dir, private _zone: NgZone,\r\n              @Optional() @Host() private _inputContainer: MdInputContainer) {}\r\n\r\n  ngAfterContentInit() {\r\n    this._keyManager = new ActiveDescendantKeyManager(this.autocomplete.options).withWrap();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this._panelPositionSubscription) {\r\n      this._panelPositionSubscription.unsubscribe();\r\n    }\r\n\r\n    this._destroyPanel();\r\n  }\r\n\r\n  /* Whether or not the autocomplete panel is open. */\r\n  get panelOpen(): boolean {\r\n    return this._panelOpen;\r\n  }\r\n\r\n  /** Opens the autocomplete suggestion panel. */\r\n  openPanel(): void {\r\n    if (!this._overlayRef) {\r\n      this._createOverlay();\r\n    }\r\n\r\n    if (!this._overlayRef.hasAttached()) {\r\n      this._overlayRef.attach(this._portal);\r\n      this._subscribeToClosingActions();\r\n    }\r\n\r\n    this._panelOpen = true;\r\n    this._floatPlaceholder('always');\r\n  }\r\n\r\n  /** Closes the autocomplete suggestion panel. */\r\n  closePanel(): void {\r\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\r\n      this._overlayRef.detach();\r\n    }\r\n\r\n    this._panelOpen = false;\r\n    this._floatPlaceholder('auto');\r\n  }\r\n\r\n  /**\r\n   * A stream of actions that should close the autocomplete panel, including\r\n   * when an option is selected, on blur, and when TAB is pressed.\r\n   */\r\n  get panelClosingActions(): Observable<MdOptionSelectEvent> {\r\n    return Observable.merge(\r\n        ...this.optionSelections,\r\n        this._blurStream.asObservable(),\r\n        this._keyManager.tabOut\r\n    );\r\n  }\r\n\r\n  /** Stream of autocomplete option selections. */\r\n  get optionSelections(): Observable<MdOptionSelectEvent>[] {\r\n    return this.autocomplete.options.map(option => option.onSelect);\r\n  }\r\n\r\n  /** The currently active option, coerced to MdOption type. */\r\n  get activeOption(): MdOption {\r\n    return this._keyManager.activeItem as MdOption;\r\n  }\r\n\r\n  /**\r\n   * Sets the autocomplete's value. Part of the ControlValueAccessor interface\r\n   * required to integrate with Angular's core forms API.\r\n   *\r\n   * @param value New value to be written to the model.\r\n   */\r\n  writeValue(value: any): void {\r\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\r\n  }\r\n\r\n  /**\r\n   * Saves a callback function to be invoked when the autocomplete's value\r\n   * changes from user input. Part of the ControlValueAccessor interface\r\n   * required to integrate with Angular's core forms API.\r\n   *\r\n   * @param fn Callback to be triggered when the value changes.\r\n   */\r\n  registerOnChange(fn: (value: any) => {}): void {\r\n    this._onChange = fn;\r\n  }\r\n\r\n  /**\r\n   * Saves a callback function to be invoked when the autocomplete is blurred\r\n   * by the user. Part of the ControlValueAccessor interface required\r\n   * to integrate with Angular's core forms API.\r\n   *\r\n   * @param fn Callback to be triggered when the component has been touched.\r\n   */\r\n  registerOnTouched(fn: () => {}) {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  _handleKeydown(event: KeyboardEvent): void {\r\n    if (this.activeOption && event.keyCode === ENTER) {\r\n      this.activeOption._selectViaInteraction();\r\n    } else {\r\n      this._keyManager.onKeydown(event);\r\n      if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {\r\n        this.openPanel();\r\n        this._scrollToOption();\r\n      }\r\n    }\r\n  }\r\n\r\n  _handleInput(value: string): void {\r\n    this._onChange(value);\r\n    this.openPanel();\r\n  }\r\n\r\n  _handleBlur(newlyFocusedTag: string): void {\r\n    this._onTouched();\r\n\r\n    // Only emit blur event if the new focus is *not* on an option.\r\n    if (newlyFocusedTag !== 'MD-OPTION') {\r\n      this._blurStream.next(null);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * In \"auto\" mode, the placeholder will animate down as soon as focus is lost.\r\n   * This causes the value to jump when selecting an option with the mouse.\r\n   * This method manually floats the placeholder until the panel can be closed.\r\n   */\r\n  private _floatPlaceholder(state: FloatPlaceholderType): void {\r\n    if (this._inputContainer) {\r\n      this._inputContainer.floatPlaceholder = state;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Given that we are not actually focusing active options, we must manually adjust scroll\r\n   * to reveal options below the fold. First, we find the offset of the option from the top\r\n   * of the panel. The new scrollTop will be that offset - the panel height + the option\r\n   * height, so the active option will be just visible at the bottom of the panel.\r\n   */\r\n  private _scrollToOption(): void {\r\n    const optionOffset = this._keyManager.activeItemIndex * AUTOCOMPLETE_OPTION_HEIGHT;\r\n    const newScrollTop =\r\n        Math.max(0, optionOffset - AUTOCOMPLETE_PANEL_HEIGHT + AUTOCOMPLETE_OPTION_HEIGHT);\r\n    this.autocomplete._setScrollTop(newScrollTop);\r\n  }\r\n\r\n  /**\r\n   * This method listens to a stream of panel closing actions and resets the\r\n   * stream every time the option list changes.\r\n   */\r\n  private _subscribeToClosingActions(): void {\r\n    // When the zone is stable initially, and when the option list changes...\r\n    Observable.merge(this._zone.onStable.first(), this.autocomplete.options.changes)\r\n        // create a new stream of panelClosingActions, replacing any previous streams\r\n        // that were created, and flatten it so our stream only emits closing events...\r\n        .switchMap(() => {\r\n          this._resetPanel();\r\n          return this.panelClosingActions;\r\n        })\r\n        // when the first closing event occurs...\r\n        .first()\r\n        // set the value, close the panel, and complete.\r\n        .subscribe(event => this._setValueAndClose(event));\r\n  }\r\n\r\n  /** Destroys the autocomplete suggestion panel. */\r\n  private _destroyPanel(): void {\r\n    if (this._overlayRef) {\r\n      this.closePanel();\r\n      this._overlayRef.dispose();\r\n      this._overlayRef = null;\r\n    }\r\n  }\r\n\r\n  private _setTriggerValue(value: any): void {\r\n    this._element.nativeElement.value =\r\n        this.autocomplete.displayWith ? this.autocomplete.displayWith(value) : value;\r\n  }\r\n\r\n   /**\r\n   * This method closes the panel, and if a value is specified, also sets the associated\r\n   * control to that value. It will also mark the control as dirty if this interaction\r\n   * stemmed from the user.\r\n   */\r\n  private _setValueAndClose(event: MdOptionSelectEvent | null): void {\r\n    if (event) {\r\n      this._setTriggerValue(event.source.value);\r\n      this._onChange(event.source.value);\r\n    }\r\n\r\n    this.closePanel();\r\n  }\r\n\r\n  private _createOverlay(): void {\r\n    this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\r\n    this._overlayRef = this._overlay.create(this._getOverlayConfig());\r\n  }\r\n\r\n  private _getOverlayConfig(): OverlayState {\r\n    const overlayState = new OverlayState();\r\n    overlayState.positionStrategy = this._getOverlayPosition();\r\n    overlayState.width = this._getHostWidth();\r\n    overlayState.direction = this._dir ? this._dir.value : 'ltr';\r\n    return overlayState;\r\n  }\r\n\r\n  private _getOverlayPosition(): PositionStrategy {\r\n    this._positionStrategy =  this._overlay.position().connectedTo(\r\n        this._element,\r\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\r\n        .withFallbackPosition(\r\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\r\n        );\r\n    this._subscribeToPositionChanges(this._positionStrategy);\r\n    return this._positionStrategy;\r\n  }\r\n\r\n  /**\r\n   * This method subscribes to position changes in the autocomplete panel, so the panel's\r\n   * y-offset can be adjusted to match the new position.\r\n   */\r\n  private _subscribeToPositionChanges(strategy: ConnectedPositionStrategy) {\r\n    this._panelPositionSubscription = strategy.onPositionChange.subscribe(change => {\r\n      this.autocomplete.positionY = change.connectionPair.originY === 'top' ? 'above' : 'below';\r\n    });\r\n  }\r\n\r\n  /** Returns the width of the input element, so the panel width can match it. */\r\n  private _getHostWidth(): number {\r\n    return this._element.nativeElement.getBoundingClientRect().width;\r\n  }\r\n\r\n  /** Reset active item to null so arrow events will activate the correct options.*/\r\n  private _resetActiveItem(): void {\r\n    this._keyManager.setActiveItem(null);\r\n  }\r\n\r\n  /**\r\n   * Resets the active item and re-calculates alignment of the panel in case its size\r\n   * has changed due to fewer or greater number of options.\r\n   */\r\n  private _resetPanel() {\r\n    this._resetActiveItem();\r\n    this._positionStrategy.recalculateLastPosition();\r\n    this.autocomplete._setVisibility();\r\n  }\r\n\r\n}\r\n\r\n"]}