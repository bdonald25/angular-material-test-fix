{"version":3,"sources":["core/compatibility/default-mode.ts"],"names":[],"mappings":";;;;;;;;;;;;OAAO,EAAC,QAAQ,EAAuB,SAAS,EAAE,WAAW,EAAE,MAAM,EAAC,MAAM,eAAe;AAG3F,OAAO,IAAM,2BAA2B,GAAG,IAAI,WAAW,CAAC,wBAAwB,CAAC,CAAC;AAErF,wFAAwF;AACxF,OAAO,IAAM,qBAAqB,GAAG,8pBAsCpC,CAAC;AAEF,qEAAqE;AAErE;IACE,2BAAiD,mBAA4B;QAC3E,EAAE,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;YACzB,MAAM,KAAK,CAAC,4EAA4E,CAAC,CAAC;QAC5F,CAAC;IACH,CAAC;IANH;QAAC,SAAS,CAAC,EAAC,QAAQ,EAAE,qBAAqB,EAAC,CAAC;mBAE9B,MAAM,CAAC,2BAA2B,CAAC;;yBAFL;IAO7C,wBAAC;AAAD,CANA,AAMC,IAAA;AAGD;;;;;;;GAOG;AAQH;IAAA;IAOA,CAAC;IANQ,2CAAO,GAAd;QACE,MAAM,CAAC;YACL,QAAQ,EAAE,mCAAmC;YAC7C,SAAS,EAAE,EAAE;SACd,CAAC;IACJ,CAAC;IAbH;QAAC,QAAQ,CAAC;YACR,YAAY,EAAE,CAAC,iBAAiB,CAAC;YACjC,OAAO,EAAE,CAAC,iBAAiB,CAAC;YAC5B,SAAS,EAAE,CAAC;oBACV,OAAO,EAAE,2BAA2B,EAAE,QAAQ,EAAE,KAAK;iBACtD,CAAC;SACH,CAAC;;2CAAA;IAQF,0CAAC;AAAD,CAPA,AAOC,IAAA","file":"default-mode.js","sourcesContent":["import {NgModule, ModuleWithProviders, Directive, OpaqueToken, Inject} from '@angular/core';\r\n\r\n\r\nexport const MATERIAL_COMPATIBILITY_MODE = new OpaqueToken('md-compatibiility-mode');\r\n\r\n/** Selector that matches all elements that may have style collisions with material1. */\r\nexport const MAT_ELEMENTS_SELECTOR = `\r\n  mat-autocomplete,\r\n  mat-card,\r\n  mat-card-actions,\r\n  mat-card-content,\r\n  mat-card-footer,\r\n  mat-card-header,\r\n  mat-card-subtitle,\r\n  mat-card-title,\r\n  mat-card-title-group,\r\n  mat-checkbox,\r\n  mat-chip,\r\n  mat-dialog-container,\r\n  mat-divider,\r\n  mat-grid-list,\r\n  mat-grid-tile,\r\n  mat-grid-tile-footer,\r\n  mat-grid-tile-header,\r\n  mat-hint,\r\n  mat-icon,\r\n  mat-ink-bar,\r\n  mat-input,\r\n  mat-list,\r\n  mat-list-item,\r\n  mat-menu,\r\n  mat-nav-list,\r\n  mat-option,\r\n  mat-placeholder,\r\n  mat-progress-bar,\r\n  mat-progress-circle,\r\n  mat-radio-button,\r\n  mat-radio-group,\r\n  mat-select,\r\n  mat-sidenav,\r\n  mat-slider,\r\n  mat-spinner,\r\n  mat-tab,\r\n  mat-toolbar\r\n`;\r\n\r\n/** Directive that enforces that the `mat-` prefix cannot be used. */\r\n@Directive({selector: MAT_ELEMENTS_SELECTOR})\r\nexport class MatPrefixEnforcer {\r\n  constructor(@Inject(MATERIAL_COMPATIBILITY_MODE) isCompatibilityMode: boolean) {\r\n    if (!isCompatibilityMode) {\r\n      throw Error('The \"mat-\" prefix cannot be used out of ng-material v1 compatibility mode.');\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Module that enforces the default \"compatibility mode\" settings. When this module is loaded\r\n * without NoConflictStyleCompatibilityMode also being imported, it will throw an error if\r\n * there are any uses of the `mat-` prefix.\r\n *\r\n * Because the point of this directive is to *not* be used, it will be tree-shaken away by\r\n * optimizers when not in compatibility mode.\r\n */\r\n@NgModule({\r\n  declarations: [MatPrefixEnforcer],\r\n  exports: [MatPrefixEnforcer],\r\n  providers: [{\r\n    provide: MATERIAL_COMPATIBILITY_MODE, useValue: false,\r\n  }]\r\n})\r\nexport class DefaultStyleCompatibilityModeModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: DefaultStyleCompatibilityModeModule,\r\n      providers: [],\r\n    };\r\n  }\r\n}\r\n"]}