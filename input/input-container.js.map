{"version":3,"sources":["input/input-container.ts"],"names":[],"mappings":"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","file":"input-container.js","sourcesContent":["import {\r\n  Component,\r\n  Input,\r\n  Directive,\r\n  AfterContentInit,\r\n  ContentChild,\r\n  ContentChildren,\r\n  ElementRef,\r\n  QueryList,\r\n  ViewEncapsulation,\r\n  Optional,\r\n  Output,\r\n  EventEmitter,\r\n  Renderer\r\n} from '@angular/core';\r\nimport {coerceBooleanProperty} from '../core';\r\nimport {NgControl} from '@angular/forms';\r\nimport {getSupportedInputTypes} from '../core/platform/features';\r\nimport {\r\n  MdInputContainerUnsupportedTypeError,\r\n  MdInputContainerPlaceholderConflictError,\r\n  MdInputContainerDuplicatedHintError,\r\n  MdInputContainerMissingMdInputError\r\n} from './input-container-errors';\r\n\r\n\r\n// Invalid input type. Using one of these will throw an MdInputContainerUnsupportedTypeError.\r\nconst MD_INPUT_INVALID_TYPES = [\r\n  'button',\r\n  'checkbox',\r\n  'color',\r\n  'file',\r\n  'hidden',\r\n  'image',\r\n  'radio',\r\n  'range',\r\n  'reset',\r\n  'submit'\r\n];\r\n\r\n\r\nlet nextUniqueId = 0;\r\n\r\n\r\n/**\r\n * The placeholder directive. The content can declare this to implement more\r\n * complex placeholders.\r\n */\r\n@Directive({\r\n  selector: 'md-placeholder, mat-placeholder'\r\n})\r\nexport class MdPlaceholder {}\r\n\r\n\r\n/** The hint directive, used to tag content as hint labels (going under the input). */\r\n@Directive({\r\n  selector: 'md-hint, mat-hint',\r\n  host: {\r\n    'class': 'md-hint',\r\n    '[class.md-right]': 'align == \"end\"',\r\n  }\r\n})\r\nexport class MdHint {\r\n  // Whether to align the hint label at the start or end of the line.\r\n  @Input() align: 'start' | 'end' = 'start';\r\n}\r\n\r\n\r\n/** The input directive, used to mark the input that `MdInputContainer` is wrapping. */\r\n@Directive({\r\n  selector: 'input[md-input], textarea[md-input], input[mat-input], textarea[mat-input]',\r\n  host: {\r\n    'class': 'md-input-element',\r\n    '[id]': 'id',\r\n    '(blur)': '_onBlur()',\r\n    '(focus)': '_onFocus()',\r\n    '(input)': '_onInput()',\r\n  }\r\n})\r\nexport class MdInputDirective implements AfterContentInit {\r\n  /** Whether the element is disabled. */\r\n  @Input()\r\n  get disabled() { return this._disabled; }\r\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\r\n  private _disabled = false;\r\n\r\n  /** Unique id of the element. */\r\n  @Input()\r\n  get id() { return this._id; };\r\n  set id(value: string) { this._id = value || this._uid; }\r\n  private _id: string;\r\n\r\n  /** Placeholder attribute of the element. */\r\n  @Input()\r\n  get placeholder() { return this._placeholder; }\r\n  set placeholder(value: string) {\r\n    if (this._placeholder != value) {\r\n      this._placeholder = value;\r\n      this._placeholderChange.emit(this._placeholder);\r\n    }\r\n  }\r\n  private _placeholder = '';\r\n\r\n  /** Whether the element is required. */\r\n  @Input()\r\n  get required() { return this._required; }\r\n  set required(value: any) { this._required = coerceBooleanProperty(value); }\r\n  private _required = false;\r\n\r\n  /** Input type of the element. */\r\n  @Input()\r\n  get type() { return this._type; }\r\n  set type(value: string) {\r\n    this._type = value || 'text';\r\n    this._validateType();\r\n  }\r\n  private _type = 'text';\r\n\r\n  /** The element's value. */\r\n  value: any;\r\n\r\n  /**\r\n   * Emits an event when the placeholder changes so that the `md-input-container` can re-validate.\r\n   */\r\n  @Output() _placeholderChange = new EventEmitter<string>();\r\n\r\n  get empty() { return (this.value == null || this.value === '') && !this._isNeverEmpty(); }\r\n\r\n  focused = false;\r\n\r\n  private get _uid() { return this._cachedUid = this._cachedUid || `md-input-${nextUniqueId++}`; }\r\n  private _cachedUid: string;\r\n\r\n  private _neverEmptyInputTypes = [\r\n    'date',\r\n    'datetime',\r\n    'datetime-local',\r\n    'month',\r\n    'time',\r\n    'week'\r\n  ].filter(t => getSupportedInputTypes().has(t));\r\n\r\n  constructor(private _elementRef: ElementRef,\r\n              private _renderer: Renderer,\r\n              @Optional() public _ngControl: NgControl) {\r\n    // Force setter to be called in case id was not specified.\r\n    this.id = this.id;\r\n\r\n    if (this._ngControl && this._ngControl.valueChanges) {\r\n      this._ngControl.valueChanges.subscribe((value) => {\r\n        this.value = value;\r\n      });\r\n    }\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this.value = this._elementRef.nativeElement.value;\r\n  }\r\n\r\n  /** Focuses the input element. */\r\n  focus() { this._renderer.invokeElementMethod(this._elementRef.nativeElement, 'focus'); }\r\n\r\n  _onFocus() { this.focused = true; }\r\n\r\n  _onBlur() { this.focused = false; }\r\n\r\n  _onInput() { this.value = this._elementRef.nativeElement.value; }\r\n\r\n  /** Make sure the input is a supported type. */\r\n  private _validateType() {\r\n    if (MD_INPUT_INVALID_TYPES.indexOf(this._type) != -1) {\r\n      throw new MdInputContainerUnsupportedTypeError(this._type);\r\n    }\r\n  }\r\n\r\n  private _isNeverEmpty() { return this._neverEmptyInputTypes.indexOf(this._type) != -1; }\r\n}\r\n\r\n\r\n/**\r\n * Component that represents a text input. It encapsulates the <input> HTMLElement and\r\n * improve on its behaviour, along with styling it according to the Material Design.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'md-input-container, mat-input-container',\r\n  templateUrl: 'input-container.html',\r\n  styleUrls: ['input.css', 'input-container.css'],\r\n  host: {\r\n    // Remove align attribute to prevent it from interfering with layout.\r\n    '[attr.align]': 'null',\r\n    '[class.ng-untouched]': '_isUntouched()',\r\n    '[class.ng-touched]': '_isTouched()',\r\n    '[class.ng-pristine]': '_isPristine()',\r\n    '[class.ng-dirty]': '_isDirty()',\r\n    '[class.ng-valid]': '_isValid()',\r\n    '[class.ng-invalid]': '_isInvalid()',\r\n    '[class.ng-pending]': '_isPending()',\r\n    '(click)': '_focusInput()',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class MdInputContainer implements AfterContentInit {\r\n  /** Alignment of the input container's content. */\r\n  @Input() align: 'start' | 'end' = 'start';\r\n\r\n  /** Color of the input divider, based on the theme. */\r\n  @Input() dividerColor: 'primary' | 'accent' | 'warn' = 'primary';\r\n\r\n  /** Text for the input hint. */\r\n  @Input()\r\n  get hintLabel() { return this._hintLabel; }\r\n  set hintLabel(value: string) {\r\n    this._hintLabel = value;\r\n    this._validateHints();\r\n  }\r\n  private _hintLabel = '';\r\n\r\n  /** Text or the floating placeholder. */\r\n  @Input()\r\n  get floatingPlaceholder(): boolean { return this._floatingPlaceholder; }\r\n  set floatingPlaceholder(value) { this._floatingPlaceholder = coerceBooleanProperty(value); }\r\n  private _floatingPlaceholder: boolean = true;\r\n\r\n  @ContentChild(MdInputDirective) _mdInputChild: MdInputDirective;\r\n\r\n  @ContentChild(MdPlaceholder) _placeholderChild: MdPlaceholder;\r\n\r\n  @ContentChildren(MdHint) _hintChildren: QueryList<MdHint>;\r\n\r\n  ngAfterContentInit() {\r\n    if (!this._mdInputChild) {\r\n      throw new MdInputContainerMissingMdInputError();\r\n    }\r\n\r\n    this._validateHints();\r\n    this._validatePlaceholders();\r\n\r\n    // Re-validate when things change.\r\n    this._hintChildren.changes.subscribe(() => {\r\n      this._validateHints();\r\n    });\r\n    this._mdInputChild._placeholderChange.subscribe(() => {\r\n      this._validatePlaceholders();\r\n    });\r\n  }\r\n\r\n  _isUntouched() { return this._hasNgControl() && this._mdInputChild._ngControl.untouched; }\r\n\r\n  _isTouched() { return this._hasNgControl() && this._mdInputChild._ngControl.touched; }\r\n\r\n  _isPristine() { return this._hasNgControl() && this._mdInputChild._ngControl.pristine; }\r\n\r\n  _isDirty() { return this._hasNgControl() && this._mdInputChild._ngControl.dirty; }\r\n\r\n  _isValid() { return this._hasNgControl() && this._mdInputChild._ngControl.valid; }\r\n\r\n  _isInvalid() { return this._hasNgControl() && this._mdInputChild._ngControl.invalid; }\r\n\r\n  _isPending() { return this._hasNgControl() && this._mdInputChild._ngControl.pending; }\r\n\r\n  /** Whether the input has a placeholder. */\r\n  _hasPlaceholder() { return !!(this._mdInputChild.placeholder || this._placeholderChild); }\r\n\r\n  _focusInput() { this._mdInputChild.focus(); }\r\n\r\n  private _hasNgControl() { return !!(this._mdInputChild && this._mdInputChild._ngControl); }\r\n\r\n  /**\r\n   * Ensure that there is only one placeholder (either `input` attribute or child element with the\r\n   * `md-placeholder` attribute.\r\n   */\r\n  private _validatePlaceholders() {\r\n    if (this._mdInputChild.placeholder && this._placeholderChild) {\r\n      throw new MdInputContainerPlaceholderConflictError();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ensure that there is a maximum of one of each `<md-hint>` alignment specified, with the\r\n   * attribute being considered as `align=\"start\"`.\r\n   */\r\n  private _validateHints() {\r\n    if (this._hintChildren) {\r\n      let startHint: MdHint = null;\r\n      let endHint: MdHint = null;\r\n      this._hintChildren.forEach((hint: MdHint) => {\r\n        if (hint.align == 'start') {\r\n          if (startHint || this.hintLabel) {\r\n            throw new MdInputContainerDuplicatedHintError('start');\r\n          }\r\n          startHint = hint;\r\n        } else if (hint.align == 'end') {\r\n          if (endHint) {\r\n            throw new MdInputContainerDuplicatedHintError('end');\r\n          }\r\n          endHint = hint;\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n"]}