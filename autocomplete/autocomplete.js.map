{"version":3,"file":"autocomplete.js","sourceRoot":"","sources":["../../../../src/lib/autocomplete/autocomplete.ts"],"names":[],"mappings":";;;;;;;;;OAAO,EACL,SAAS,EACT,eAAe,EACf,UAAU,EACV,KAAK,EACL,SAAS,EACT,WAAW,EACX,SAAS,EACT,iBAAiB,EAClB,MAAM,eAAe;OACf,EAAC,QAAQ,EAAC,MAAM,SAAS;AAEhC;;;GAGG;AACH,IAAI,4BAA4B,GAAG,CAAC,CAAC;AAerC;IAAA;QAEE,0EAA0E;QAC1E,cAAS,GAA0B,OAAO,CAAC;QAE3C,oFAAoF;QACpF,cAAS,GAAG,KAAK,CAAC;QASlB,2EAA2E;QAC3E,OAAE,GAAW,qBAAmB,4BAA4B,EAAI,CAAC;IA2BnE,CAAC;IAzBC;;;OAGG;IACH,sCAAa,GAAb,UAAc,SAAiB;QAC7B,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YACf,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,SAAS,GAAG,SAAS,CAAC;QACjD,CAAC;IACH,CAAC;IAED,8DAA8D;IAC9D,uCAAc,GAAd;QAAA,iBAEC;QADC,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,cAAM,OAAA,KAAI,CAAC,SAAS,GAAG,CAAC,CAAC,KAAI,CAAC,OAAO,CAAC,MAAM,EAAtC,CAAsC,CAAC,CAAC;IACvE,CAAC;IAED,8EAA8E;IAC9E,sCAAa,GAAb;QACE,MAAM,CAAC;YACL,8BAA8B,EAAE,IAAI,CAAC,SAAS,KAAK,OAAO;YAC1D,8BAA8B,EAAE,IAAI,CAAC,SAAS,KAAK,OAAO;YAC1D,0BAA0B,EAAE,IAAI,CAAC,SAAS;YAC1C,yBAAyB,EAAE,CAAC,IAAI,CAAC,SAAS;SAC3C,CAAC;IACJ,CAAC;IAjCD;QAAC,SAAS,CAAC,WAAW,CAAC;;oDAAA;IACvB;QAAC,SAAS,CAAC,OAAO,CAAC;;iDAAA;IACnB;QAAC,eAAe,CAAC,QAAQ,CAAC;;mDAAA;IAG1B;QAAC,KAAK,EAAE;;uDAAA;IAxBV;QAAC,SAAS,CAAC;YACT,QAAQ,EAAE,MAAM,CAAC,EAAE;YACnB,QAAQ,EAAE,mCAAmC;YAC7C,WAAW,EAAE,mBAAmB;YAChC,SAAS,EAAE,CAAC,kBAAkB,CAAC;YAC/B,aAAa,EAAE,iBAAiB,CAAC,IAAI;YACrC,QAAQ,EAAE,gBAAgB;YAC1B,IAAI,EAAE;gBACJ,0BAA0B,EAAE,MAAM;aACnC;SACF,CAAC;;sBAAA;IA4CF,qBAAC;AAAD,CAAC,AA3CD,IA2CC","sourcesContent":["import {\r\n  Component,\r\n  ContentChildren,\r\n  ElementRef,\r\n  Input,\r\n  QueryList,\r\n  TemplateRef,\r\n  ViewChild,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport {MdOption} from '../core';\r\n\r\n/**\r\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\r\n * the component definition.\r\n */\r\nlet _uniqueAutocompleteIdCounter = 0;\r\n\r\nexport type AutocompletePositionY = 'above' | 'below';\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'md-autocomplete, mat-autocomplete',\r\n  templateUrl: 'autocomplete.html',\r\n  styleUrls: ['autocomplete.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  exportAs: 'mdAutocomplete',\r\n  host: {\r\n    '[class.mat-autocomplete]': 'true'\r\n  }\r\n})\r\nexport class MdAutocomplete {\r\n\r\n  /** Whether the autocomplete panel displays above or below its trigger. */\r\n  positionY: AutocompletePositionY = 'below';\r\n\r\n  /** Whether the autocomplete panel should be visible, depending on option length. */\r\n  showPanel = false;\r\n\r\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\r\n  @ViewChild('panel') panel: ElementRef;\r\n  @ContentChildren(MdOption) options: QueryList<MdOption>;\r\n\r\n  /** Function that maps an option's control value to its display value in the trigger. */\r\n  @Input() displayWith: (value: any) => string;\r\n\r\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\r\n  id: string = `md-autocomplete-${_uniqueAutocompleteIdCounter++}`;\r\n\r\n  /**\r\n   * Sets the panel scrollTop. This allows us to manually scroll to display\r\n   * options below the fold, as they are not actually being focused when active.\r\n   */\r\n  _setScrollTop(scrollTop: number): void {\r\n    if (this.panel) {\r\n      this.panel.nativeElement.scrollTop = scrollTop;\r\n    }\r\n  }\r\n\r\n  /** Panel should hide itself when the option list is empty. */\r\n  _setVisibility() {\r\n    Promise.resolve().then(() => this.showPanel = !!this.options.length);\r\n  }\r\n\r\n  /** Sets a class on the panel based on its position (used to set y-offset). */\r\n  _getClassList() {\r\n    return {\r\n      'mat-autocomplete-panel-below': this.positionY === 'below',\r\n      'mat-autocomplete-panel-above': this.positionY === 'above',\r\n      'mat-autocomplete-visible': this.showPanel,\r\n      'mat-autocomplete-hidden': !this.showPanel\r\n    };\r\n  }\r\n\r\n}\r\n\r\n"]}